<?php

/**
 * @file
 * DKAN Fixtures file.
 */

define('DKAN_FIXTURES_IS_EXPORTING', 'dkan_fixtures_is_exporting');

$odsm_path = drupal_get_path('module', 'open_data_schema_map');
require_once $odsm_path . '/open_data_schema_map.output.inc';

/**
 * Render fixtures for datasets.
 */
function dkan_fixtures_render_fixtures($nids = array()) {
  global $base_url;

  $rendered_fixtures = array();

  // Render list of packages first.
  $package_list_api = open_data_schema_map_api_load('ckan_package_list');
  // This adds arguments to ckan_package_list so we can only get specifiied IDs.
  $package_list_api->arguments[] = array('field' => 'id', 'required' => 0);
  $package_list_api->mapping['id']['value'] = '[node:nid]';

  $package_list_fetch = open_data_schema_map_render_api($package_list_api, NULL, array('id' => $nids));
  $package_list = $package_list_fetch['result'];
  $rendered_fixtures[] = array(
    'filename' => 'package_list.json',
    'content' => open_data_schema_map_json_pretty_output($package_list_api, $package_list),
  );
  $resource_ids = array();
  $group_ids = array();
  $group_data = array();

  // Use ids in package_list to create exports for every dataset.
  $package_show_api = open_data_schema_map_api_load('ckan_package_show');
  if (isset($package_list['result'])) {
    foreach ($package_list['result'] as $id) {
      $query = array('id' => $id, 'q' => 'api/3/action/package_show');
      $queries = array('id' => $id);
      $package_show = open_data_schema_map_render_api($package_show_api, $query, $queries);
      $package_show = $package_show['result'];
      $package_show['result'] = reset($package_show['result']);
      // If the License URI is available ODSM will return that on the 'license_title' field instead of the ID.
      // In order to import the data we need to always work with the URI ID so we need to do a convertion.
      if (isset($package_show['result']['license_title'])) {
        $package_show['result']['license_title'] = getLicenseIdForValue($package_show['result']['license_title']);
      }
      if (isset($package_show['result']['resources'])) {
        foreach ($package_show['result']['resources'] as $key => $resource) {
          if (isset($resource['url'])) {
            $file = $resource['url'];
            if (strpos($file, $base_url) === 0) {
              $file = parse_url($file);
              $file = DRUPAL_ROOT . $file['path'];
              $package_show['result']['resources'][$key]['url'] = 'files/' . basename($file);
            }
          }
          $resource_ids[] = $resource['id'];
        }
      }
      // Grab all the information related with Groups to be exported as a
      // fixture later.
      if (isset($package_show['result']['groups'])) {
        foreach ($package_show['result']['groups'] as $key => $group) {
          $group_ids[] = $group['id'];
          $group_data[$group['id']] = $group;
        }
      }
      $rendered_fixtures[] = array(
        'filename' => 'package_show?id=' . $id . '.json',
        'content' => open_data_schema_map_json_pretty_output($package_show_api, $package_show),
      );
    }

    // Fake resource-list api
    $resource_list_api = array();
    $rendered_fixtures[] = array(
      'filename' => 'resource_list.json',
      'content' => open_data_schema_map_json_pretty_output(
        $resource_list_api,
        array(
          'help' => t('List of resource ids'),
          'result' => $resource_ids,
        )
      ),
    );

    // Fake group-list api
    $group_list_api = array();
    $rendered_fixtures[] = array(
      'filename' => 'group_list.json',
      'content' => open_data_schema_map_json_pretty_output(
        $group_list_api,
        array(
          'help' => t('List of group ids'),
          'result' => $group_ids,
        )
      ),
    );

    // Use ids in fake resource-list to create exports for every resource.
    $resource_show_api = open_data_schema_map_api_load('ckan_resource_show');
    foreach ($resource_ids as $id) {
      $files_to_save = array();
      $query = array('id' => $id, 'q' => 'api/3/action/resource_show');
      $queries = array('id' => $id);
      $resource_show_api->mapping['url']['value'] = '[node:field-link-api:url] || [node:field_link_remote_file] || [node:field-upload:url]';
      $resource_show = open_data_schema_map_render_api($resource_show_api, $query, $queries);
      $resource_show = $resource_show['result'];
      if (isset($resource_show['result']['url'])) {
        $file = $resource_show['result']['url'];
        if (strpos($file, $base_url) === 0) {
          $file = parse_url($file);
          $file = DRUPAL_ROOT . $file['path'];
          $files_to_save[] = $file;
          $resource_show['result']['url'] = 'files/' . basename($file);
        }
      }
      $rendered_fixtures[] = array(
        'filename' => 'resource_show?id=' . $id . '.json',
        'content' => open_data_schema_map_json_pretty_output($resource_show_api, $resource_show),
        'resource_files' => $files_to_save,
      );
    }

    // Use ids in fake group-list to create exports for every group.
    $group_show_api = array();
    foreach ($group_ids as $id) {
      $files_to_save = array();
      if (isset($group_data[$id]['image_display_url'])) {
        $file = $group_data[$id]['image_display_url'];
        if (strpos($file, $base_url) === 0) {
          $file = parse_url($file);
          $file = DRUPAL_ROOT . $file['path'];
          $files_to_save[] = $file;
          $group_data[$id]['image_display_url'] = 'files/' . basename($file);
        }
      }
      $rendered_fixtures[] = array(
        'filename' => 'group_show?id=' . $id . '.json',
        'content' => open_data_schema_map_json_pretty_output($group_show_api,
          array(
            'help' => t('Group data'),
            'result' => $group_data[$id],
        )),
        'group_files' => $files_to_save,
      );
    }
  }
  return $rendered_fixtures;
}

/**
 * Saves json fixture file into data directory.
 */
function dkan_fixtures_save_fixture($fixture, $module_path) {
  $file = fopen($module_path . '/data/' . $fixture['filename'], 'w');
  $fixture['content'] = mb_convert_encoding($fixture['content'], "UTF-8", "HTML-ENTITIES");
  fwrite($file, $fixture['content']);
  fclose($file);
  if (isset($fixture['resource_files'])) {
    foreach ($fixture['resource_files'] as $resource_file) {
      $resource_file = urldecode($resource_file);
      $resource_file = preg_replace('!\s+!', ' ', $resource_file);
      $destination = $module_path . '/data/files/' . basename($resource_file);
      file_unmanaged_copy($resource_file, $destination, FILE_EXISTS_REPLACE);
    }
  }

  if (isset($fixture['group_files'])) {
    foreach ($fixture['group_files'] as $group_file) {
      $group_file = urldecode($group_file);
      $group_file = preg_replace('!\s+!', ' ', $group_file);
      $destination = $module_path . '/data/files/' . basename($group_file);
      file_unmanaged_copy($group_file, $destination, FILE_EXISTS_REPLACE);
    }
  }
}

/**
 * Deregisters DKAN fixture migrations.
 */
function dkan_fixtures_migrations_disable() {
  Migration::deregisterMigration('ckan_dataset_fixtures');
  Migration::deregisterMigration('ckan_resource_fixtures');
  Migration::deregisterMigration('ckan_group_fixtures');
}

/**
 * Implements hook_restws_format_info().
 *
 * Provides basic formats.
 */
function dkan_fixtures_restws_format_info() {
  $result = array(
    'array' => array(
      'label' => t('Array'),
      'class' => 'RestWSFormatArray',
    ),
  );
  return $result;
}

/**
 * Adds array format.
 */
class RestWSFormatArray extends RestWSBaseFormat {
  /**
   * Returns array instead of serialized value.
   */
  public function serialize($values) {
    foreach ($values as $field => $value) {
      // Adds value to entity fields.
      if (isset($value['resource']) && isset($value['uuid'])) {
        $resource = entity_uuid_load($value['resource'], array($value['uuid']));
        $value['value'] = $resource[$value['id']]->name;
        $values[$field] = $value;
      }
      elseif (isset($value[0]) && is_array($value[0])) {
        foreach ($value as $num => $item) {
          if (isset($item['resource']) && isset($item['uuid'])) {
            $resource = entity_uuid_load($item['resource'], array($item['uuid']));
            $item['value'] = $resource[$item['id']]->name;
            $values[$field][$num] = $item;
          }
        }
      }
    }
    return $values;
  }
}

function dkan_fixtures_open_data_schema_map_endpoint_query_alter(&$query, $machine_name) {
  if (variable_get(DKAN_FIXTURES_IS_EXPORTING, FALSE)) {
    if (isset($query->propertyConditions)) {
      foreach($query->propertyConditions as $key => $property) {
        if ($property['column'] == 'status') {
          unset($query->propertyConditions[$key]);
        }  
      }
    }
  }
}

/**
 * Adds additional fields to package_show.
 */
function dkan_fixtures_open_data_schema_map_results_alter(&$result, $machine_name, $schema, $ids) {
  $api = open_data_schema_map_api_load($machine_name);
  if ($machine_name == 'ckan_package_show') {
    $format = restws_format('array');
    $resource = restws_resource_controller('node');
    $restws_result = $format->viewResource($resource, $ids[0], NULL);
    $fields = open_data_schema_map_additional_fields($api);
    foreach ($fields as $id => $field) {
      $result[0][0]['dkan_additional_fields'][$field] = $restws_result[$field];
    }
  }
}

/**
 * Saves all available fixtures.
 */
function dkan_fixtures_dkan_save_data($nids = array()) {
  variable_set(DKAN_FIXTURES_IS_EXPORTING, TRUE);
  // Allows other modules to receive exports.
  $modules = module_implements('dkan_fixtures_register');
  $modules = $modules ? $modules : array('dkan_fixtures');
  $module = array_pop($modules);
  $module_path = drupal_get_path('module', $module);
  // Remove old files.
  $files = glob($module_path . '/data/*');
  foreach ($files as $file) {
    if (is_file($file)) {
      unlink($file);
    }
  }
  // Create new fixtures.
  $fixtures = dkan_fixtures_render_fixtures($nids);
  if (module_hook($module, 'dkan_fixtures_prerendered')) {
    $prerendered = $module . '_dkan_fixtures_prerendered';
    $prerendered = $prerendered();
    foreach ($prerendered as $fixture) {
      $fixtures[] = $fixture();
    }
  }
  // Save them.
  foreach ($fixtures as $fixture) {
    dkan_fixtures_save_fixture($fixture, $module_path);
  }
  variable_set(DKAN_FIXTURES_IS_EXPORTING, FALSE);
}

/**
 * If the value is the license URI then search and return the ID.
 */
function getLicenseIdForValue($value) {
  if (filter_var($value, FILTER_VALIDATE_URL)) {
    $licenses = dkan_dataset_content_types_license_subscribe();
    foreach ($licenses as $license_id => $license_data) {
      if (isset($license_data['uri']) && $license_data['uri'] === $value) {
        return $license_id;
      }
    }
  }

  return $value;
}
