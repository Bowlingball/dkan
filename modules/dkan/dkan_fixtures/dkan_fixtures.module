<?php

/**
 * @file
 * DKAN Fixtures file.
 */

define('DKAN_FIXTURES_IS_EXPORTING', 'dkan_fixtures_is_exporting');

$odsm_path = drupal_get_path('module', 'open_data_schema_map');
require_once $odsm_path . '/open_data_schema_map.output.inc';

/**
 * Render fixtures for datasets.
 */
function dkan_fixtures_render_fixtures($nids = array()) {
  global $base_url;

  $rendered_fixtures = array();

  // Render list of packages first.
  $package_list_api = open_data_schema_map_api_load('ckan_package_list');
  // This adds arguments to ckan_package_list so we can only get specifiied IDs.
  $package_list_api->arguments[] = array('field' => 'id', 'required' => 0);
  $package_list_api->mapping['id']['value'] = '[node:nid]';

  $package_list_fetch = open_data_schema_map_render_api($package_list_api, NULL, array('id' => $nids));
  $package_list = $package_list_fetch['result'];
  $rendered_fixtures[] = array(
    'filename' => 'package_list.json',
    'content' => open_data_schema_map_json_pretty_output($package_list_api, $package_list),
  );
  $resource_ids = array();
  $group_ids = array();
  $group_data = array();

  // Use ids in package_list to create exports for every dataset.
  $package_show_api = open_data_schema_map_api_load('ckan_package_show');
  if (isset($package_list['result'])) {
    foreach ($package_list['result'] as $id) {
      $query = array('id' => $id, 'q' => 'api/3/action/package_show');
      $queries = array('id' => $id);
      $package_show = open_data_schema_map_render_api($package_show_api, $query, $queries);
      $package_show = $package_show['result'];
      $package_show['result'] = reset($package_show['result']);
      // If the License URI is available ODSM will return that on the 'license_title' field instead of the ID.
      // In order to import the data we need to always work with the URI ID so we need to do a convertion.
      if (isset($package_show['result']['license_title'])) {
        $package_show['result']['license_title'] = getLicenseId($package_show['result']['license_title']);
      }
      if (isset($package_show['result']['resources'])) {
        foreach ($package_show['result']['resources'] as $key => $resource) {
          if (isset($resource['url'])) {
            $file = $resource['url'];
            if (strpos($file, $base_url) === 0) {
              $file = parse_url($file);
              $file = DRUPAL_ROOT . $file['path'];
              $package_show['result']['resources'][$key]['url'] = 'files/' . basename($file);
            }
          }
          $resource_ids[] = $resource['id'];
        }
      }
      // Grab all the information related with Groups to be exported as a
      // fixture later.
      if (isset($package_show['result']['groups'])) {
        foreach ($package_show['result']['groups'] as $key => $group) {
          $group_ids[] = $group['id'];
          $group_data[$group['id']] = $group;
        }
      }
      $rendered_fixtures[] = array(
        'filename' => 'package_show?id=' . $id . '.json',
        'content' => open_data_schema_map_json_pretty_output($package_show_api, $package_show),
      );
    }

    // Fake resource-list api
    $resource_list_api = array();
    $rendered_fixtures[] = array(
      'filename' => 'resource_list.json',
      'content' => open_data_schema_map_json_pretty_output(
        $resource_list_api,
        array(
          'help' => t('List of resource ids'),
          'result' => $resource_ids,
        )
      ),
    );

    // Fake group-list api
    $group_list_api = array();
    $rendered_fixtures[] = array(
      'filename' => 'group_list.json',
      'content' => open_data_schema_map_json_pretty_output(
        $group_list_api,
        array(
          'help' => t('List of group ids'),
          'result' => $group_ids,
        )
      ),
    );

    // Use ids in fake resource-list to create exports for every resource.
    $resource_show_api = open_data_schema_map_api_load('ckan_resource_show');
    foreach ($resource_ids as $id) {
      $files_to_save = array();
      $query = array('id' => $id, 'q' => 'api/3/action/resource_show');
      $queries = array('id' => $id);
      $resource_show_api->mapping['url']['value'] = '[node:field-link-api:url] || [node:field_link_remote_file] || [node:field-upload:url]';
      $resource_show = open_data_schema_map_render_api($resource_show_api, $query, $queries);
      $resource_show = $resource_show['result'];
      if (isset($resource_show['result']['url'])) {
        $file = $resource_show['result']['url'];
        if (strpos($file, $base_url) === 0) {
          $file = parse_url($file);
          $file = DRUPAL_ROOT . $file['path'];
          $files_to_save[] = $file;
          $resource_show['result']['url'] = 'files/resource/' . basename($file);
        }
      }
      $rendered_fixtures[] = array(
        'filename' => 'resource_show?id=' . $id . '.json',
        'content' => open_data_schema_map_json_pretty_output($resource_show_api, $resource_show),
        'files' => $files_to_save,
        'files_subdir' => 'resource'
      );
    }

    // Use ids in fake group-list to create exports for every group.
    $group_show_api = array();
    foreach ($group_ids as $id) {
      $files_to_save = array();
      if (isset($group_data[$id]['image_display_url'])) {
        $file = $group_data[$id]['image_display_url'];
        if (strpos($file, $base_url) === 0) {
          $file = parse_url($file);
          $file = DRUPAL_ROOT . $file['path'];
          $files_to_save[] = $file;
          $group_data[$id]['image_display_url'] = 'files/group/' . basename($file);
        }
      }
      $rendered_fixtures[] = array(
        'filename' => 'group_show?id=' . $id . '.json',
        'content' => open_data_schema_map_json_pretty_output($group_show_api,
          array(
            'help' => t('Group data'),
            'result' => $group_data[$id],
        )),
        'files' => $files_to_save,
        'files_subdir' => 'group'
      );
    }

    // Export Visualization Entities.
    _build_visualization_entity_fixtures($rendered_fixtures);

    // Export Data Dashboards.
    _build_panelized_nodes_fixtures('data_dashboard', $rendered_fixtures);

    // Export Data Stories.
    _build_panelized_nodes_fixtures('dkan_data_story', $rendered_fixtures);
  }
  return $rendered_fixtures;
}

/**
 *
 */
function _build_panelized_nodes_fixtures($content_type, &$fixtures) {
  global $base_url;

  $panelized_nodes = array();
  $files_to_save = array();

  // Get all published nodes with the specified type.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->entityCondition('status', 1)
    ->execute();

  if ($result) {
    $nodes = node_load_multiple(array_keys($result['node']));

    // Process all nodes.
    foreach ($nodes as $node) {
      // Export data common to all content types.
      $nuuid = $node->uuid;
      $panelized_nodes[] = $nuuid;

      $panelized_node = array();
      $panelized_node['uuid'] = $nuuid;
      $panelized_node['id'] = $node->nid;
      $panelized_node['type'] = $node->type;
      $panelized_node['title'] = $node->title;
      $panelized_node['created'] = $node->created;
      $panelized_node['changed'] = $node->changed;

      // Export specific data.
      // TODO: Refactor this.
      switch ($node->type) {
        case 'dkan_data_story':
          // Body.
          $panelized_node['body'] = $node->body;
          // Image
          $panelized_node['field_image'] = '';
          if (!empty($node->field_image)) {
            $file = $node->field_image[LANGUAGE_NONE][0];
            $panelized_node['field_image'] = 'files/dkan_data_story/' . $file['filename'];
            $files_to_save[] = drupal_realpath($file['uri']);
          }
          // Tags
          $panelized_node['field_tags'] = $node->field_tags;
          break;
        case 'page':
          $panelized_node['body'] = $node->body;
          break;
        default:
          break;
      }

      // Add Panelizer data on export: panelizer_entity, panels_display and panels_pane.
      $panelized_node['panelizer'] = _get_panelizer_data($node);

      // Build 'Item' fixture for content.
      $fixtures[] = array(
        'filename' => $content_type . '_show?id=' . $nuuid . '.json',
        'content' => open_data_schema_map_json_pretty_output(
          array(),
          array(
            'help' => t($content_type . ' item'),
            'result' => $panelized_node,
          )
        ),
        'files' => $files_to_save,
        'files_subdir' => 'dkan_data_story'
      );
    }

    // Build 'List' fixture for content.
    $fixtures[] = array(
      'filename' => $content_type . '_list.json',
      'content' => open_data_schema_map_json_pretty_output(
        array(),
        array(
          'help' => t($content_type . ' list'),
          'result' => $panelized_nodes,
        )
      ),
    );
  }
}

/**
 *
 */
function _get_panelizer_data($node) {
  $panelizer_data = array();

  if (isset($node->panelizer)) {
    ctools_include('export');
    // Get panelizer_entity information
    $result = db_query("SELECT * FROM {panelizer_entity} WHERE entity_id = :nid", array(':nid' => $node->nid))->fetchObject();
    $panelizer_entity = ctools_export_unpack_object('panelizer_entity', $result);

    // Get panels_display.
    $result = db_query("SELECT * FROM {panels_display} WHERE did = :did", array(':did' => $panelizer_entity->did))->fetchObject();
    $panels_display = ctools_export_unpack_object('panels_display', $result);
    unset($panels_display->did);
    $panelizer_data['panels_display'] = $panels_display;

    // Get panels_pane.
    $result = db_query("SELECT * FROM {panels_pane} WHERE did = :did", array(':did' => $panelizer_entity->did));
    foreach ($result as $obj) {
      $panels_pane = ctools_export_unpack_object('panels_pane', $obj);
      unset($panels_pane->pid);
      unset($panels_pane->did);
      $panelizer_data['panels_pane'][] = $panels_pane;
    }

    unset($panelizer_entity->entity_id);
    unset($panelizer_entity->revision_id);
    unset($panelizer_entity->did);
    $panelizer_data['panelizer_entity'] = $panelizer_entity;
  }

  return $panelizer_data;
}

/**
 *
 */
function _build_visualization_entity_fixtures(&$rendered_fixtures) {

  $visualization_entities = array();
  $visualization_entity_files = array();

  // Get all entities available for export.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'visualization')
    ->entityCondition('bundle', 've_chart');

  $results = $query->execute();
  if (isset($results['visualization'])) {
    $visualizations = entity_load('visualization', array_keys($results['visualization']));

    foreach ($visualizations as $id => $visualization) {
      $visualization_wrapper = entity_metadata_wrapper('visualization', $visualization);
      $visualization_entities[$id] = $visualization;

      $visualization_settings = json_decode($visualization_wrapper->field_ve_settings->value());
      $source_url = $visualization_settings->source->url;

      // Check if the source is an URL.
      if(filter_var($source_url, FILTER_VALIDATE_URL)) {
        // Add the file to the list of files that need to be download locally as part of fixtures data.
        $visualization_entity_files[] = $source_url;
        // Replace the URL.
        $visualization_settings->source->url = 'files/visualization_entity/' . basename($source_url);
        // Update settings field.
        $visualization_wrapper->field_ve_settings->set(json_encode($visualization_settings));
      }

      $visualization_data = array();
      $visualization_data['id'] = $visualization_wrapper->getIdentifier();
      $visualization_data['type'] = $visualization_wrapper->getBundle();
      $visualization_data['title'] = $visualization_wrapper->title->value();
      $visualization_data['description'] = $visualization_wrapper->field_description->value();
      $visualization_data['settings'] = $visualization_wrapper->field_ve_settings->value();
      if (!empty($visualization->field_uuid_resource)) {
        $visualization_data['existing_resource_uuid'] = $visualization->field_uuid_resource[LANGUAGE_NONE][0]['target_uuid'];
      }

      // Add fixture with visualization entity data.
      $rendered_fixtures[] = array(
        'filename' => 'visualization_entity_show?id=' . $id . '.json',
        'content' => open_data_schema_map_json_pretty_output(
          array(),
          array(
            'help' => t('Visualization Entity data'),
            'result' => $visualization_data,
          )),
        'files' => $visualization_entity_files,
        'files_subdir' => 'visualization_entity'
      );
    }
  }

  // Add fixture with visualization entities list.
  $rendered_fixtures[] = array(
    'filename' => 'visualization_entity_list.json',
    'content' => open_data_schema_map_json_pretty_output(
      array(),
      array(
        'help' => t('Visualization Entity list'),
        'result' => array_keys($visualization_entities),
      ))
  );

}

/**
 * Saves json fixture file into data directory.
 */
function dkan_fixtures_save_fixture($fixture, $module_path) {
  $file = fopen($module_path . '/data/' . $fixture['filename'], 'w');
  $fixture['content'] = mb_convert_encoding($fixture['content'], "UTF-8", "HTML-ENTITIES");
  fwrite($file, $fixture['content']);
  fclose($file);
  if (isset($fixture['files'])) {
    foreach ($fixture['files'] as $file) {
      $file = urldecode($file);
      $file = preg_replace('!\s+!', ' ', $file);
      $destination = $module_path . '/data/files/' . $fixture['files_subdir'] . '/' . basename($file);
      file_unmanaged_copy($file, $destination, FILE_EXISTS_REPLACE);
    }
  }
}

/**
 * Deregisters DKAN fixture migrations.
 */
function dkan_fixtures_migrations_disable() {
  Migration::deregisterMigration('ckan_dataset_fixtures');
  Migration::deregisterMigration('ckan_resource_fixtures');
  Migration::deregisterMigration('ckan_group_fixtures');
}

/**
 * Implements hook_restws_format_info().
 *
 * Provides basic formats.
 */
function dkan_fixtures_restws_format_info() {
  $result = array(
    'array' => array(
      'label' => t('Array'),
      'class' => 'RestWSFormatArray',
    ),
  );
  return $result;
}

/**
 * Adds array format.
 */
class RestWSFormatArray extends RestWSBaseFormat {
  /**
   * Returns array instead of serialized value.
   */
  public function serialize($values) {
    foreach ($values as $field => $value) {
      // Adds value to entity fields.
      if (isset($value['resource']) && isset($value['uuid'])) {
        $resource = entity_uuid_load($value['resource'], array($value['uuid']));
        $value['value'] = $resource[$value['id']]->name;
        $values[$field] = $value;
      }
      elseif (isset($value[0]) && is_array($value[0])) {
        foreach ($value as $num => $item) {
          if (isset($item['resource']) && isset($item['uuid'])) {
            $resource = entity_uuid_load($item['resource'], array($item['uuid']));
            $item['value'] = $resource[$item['id']]->name;
            $values[$field][$num] = $item;
          }
        }
      }
    }
    return $values;
  }
}

function dkan_fixtures_open_data_schema_map_endpoint_query_alter(&$query, $machine_name) {
  if (variable_get(DKAN_FIXTURES_IS_EXPORTING, FALSE)) {
    if (isset($query->propertyConditions)) {
      foreach($query->propertyConditions as $key => $property) {
        if ($property['column'] == 'status') {
          unset($query->propertyConditions[$key]);
        }  
      }
    }
  }
}

/**
 * Adds additional fields to package_show.
 */
function dkan_fixtures_open_data_schema_map_results_alter(&$result, $machine_name, $schema, $ids) {
  $api = open_data_schema_map_api_load($machine_name);
  if ($machine_name == 'ckan_package_show') {
    $format = restws_format('array');
    $resource = restws_resource_controller('node');
    $restws_result = $format->viewResource($resource, $ids[0], NULL);
    $fields = open_data_schema_map_additional_fields($api);
    foreach ($fields as $id => $field) {
      $result[0][0]['dkan_additional_fields'][$field] = $restws_result[$field];
    }
  }
}

/**
 * Saves all available fixtures.
 */
function dkan_fixtures_dkan_save_data($nids = array()) {
  variable_set(DKAN_FIXTURES_IS_EXPORTING, TRUE);
  // Allows other modules to receive exports.
  $modules = module_implements('dkan_fixtures_register');
  $modules = $modules ? $modules : array('dkan_fixtures');
  $module = array_pop($modules);
  $module_path = drupal_get_path('module', $module);
  // Remove old files.
  $files = glob($module_path . '/data/*');
  foreach ($files as $file) {
    if (is_file($file)) {
      unlink($file);
    }
  }
  // Create new fixtures.
  $fixtures = dkan_fixtures_render_fixtures($nids);
  if (module_hook($module, 'dkan_fixtures_prerendered')) {
    $prerendered = $module . '_dkan_fixtures_prerendered';
    $prerendered = $prerendered();
    foreach ($prerendered as $fixture) {
      $fixtures[] = $fixture();
    }
  }
  // Save them.
  foreach ($fixtures as $fixture) {
    dkan_fixtures_save_fixture($fixture, $module_path);
  }
  variable_set(DKAN_FIXTURES_IS_EXPORTING, FALSE);
}

/**
 * ODSM returns either the URI or the label of the License.
 * This function retrieves the ID as needed for import.
 */
function getLicenseId($license) {
  $licenses = dkan_dataset_content_types_license_subscribe();
  foreach ($licenses as $license_id => $license_data) {
    if ((isset($license_data['uri']) && $license_data['uri'] === $license) ||
         ($license_data['label'] === $license)) {
      return $license_id;
    }
  }
}
