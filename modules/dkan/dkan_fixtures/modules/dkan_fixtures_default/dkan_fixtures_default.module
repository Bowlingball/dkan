<?php

/**
 * @file
 * DKAN Fixtures Default module file.
 */

/**
 * Implements hook_migrate_api().
 */
function dkan_fixtures_default_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'dkan_fixtures_default_datasets' => array(
        'class_name' => 'DefaultContentDatasetImport',
        'group_name' => 'dkan_fixtures',
        'title' => t('DKAN Default Datasets'),
      ),
      'dkan_fixtures_default_resources' => array(
        'class_name' => 'DefaultContentResourceImport',
        'group_name' => 'dkan_fixtures',
        'title' => t('DKAN Default Resources'),
      ),
      'dkan_fixtures_default_groups' => array(
        'class_name' => 'DefaultContentGroupImport',
        'group_name' => 'dkan_fixtures',
        'title' => t('DKAN Default Groups'),
      ),
      'dkan_fixtures_default_visualization_entities' => array(
        'class_name' => 'DefaultContentVisualizationEntityImport',
        'group_name' => 'dkan_fixtures',
        'title' => t('DKAN Default Visualization Entities'),
      ),
      'dkan_fixtures_default_data_stories' => array(
        'class_name' => 'DefaultContentDataStoriesImport',
        'group_name' => 'dkan_fixtures',
        'title' => t('DKAN Default Data Stories'),
      ),
      'dkan_fixtures_default_data_dashboards' => array(
        'class_name' => 'DefaultContentDataDashboardsImport',
        'group_name' => 'dkan_fixtures',
        'title' => t('DKAN Default Data Dashboards'),
      ),
    ),
  );
  return $api;
}

/**
 * Implements hook_dkan_fixtures_register().
 */
function dkan_fixtures_default_dkan_fixtures_register() {
  return 'dkan_fixtures_default';
}


/**
 * Migration class used to import Default Datasets from fixtures.
 */
class DefaultContentDatasetImport extends MigrateCkanDatasetImport {

  /**
   * __construct().
   */
  public function __construct($arguments) {
    if (!isset($arguments['endpoint'])) {
      $arguments['endpoint'] = drupal_get_path('module', 'dkan_fixtures_default') . '/data/';
      $arguments['list_url'] = 'package_list.json';
      $arguments['item_url'] = 'package_show?id=:id.json';
    }

    // Add field mapping for topics.
    $this->addFieldMapping('field_topic', 'topic_names');

    parent::__construct($arguments);
  }

  /**
   * Prepares the row data for processing.
   */
  public function prepareRow($row) {
    parent::prepareRow($row);
    // Process topics.
    $topics = taxonomy_vocabulary_machine_name_load('dkan_topics');
    if (isset($row->dkan_additional_fields->field_topic)) {
      foreach ($row->dkan_additional_fields->field_topic as $topic) {
        $topic = $this->createTax($topic->value, 'dkan_topics', $topics->vid);
        $row->topic_names[] = $topic->name;
      }
    }
  }
}


/**
 * Migration class used to import Default Resources from fixtures.
 */
class DefaultContentResourceImport extends MigrateCkanResourceImport {

  /**
   * __construct().
   */
  public function __construct($arguments) {
    if (!isset($arguments['endpoint'])) {
      $arguments['endpoint'] = drupal_get_path('module', 'dkan_fixtures_default') . '/data/';
      $arguments['list_url'] = drupal_get_path('module', 'dkan_fixtures_default') . '/data/' . 'resource_list.json';
      $arguments['item_url'] = 'resource_show?id=:id.json';
    }
    parent::__construct($arguments);
  }

  /**
   * Do extra processing on the node data before its saved.
   */
  public function prepare($node, $row) {
    parent::prepare($node, $row);
    // Assign to 'Admin' user.
    $node->uid = 1;
    // Set up as published.
    $node->status = 1;
  }
}


/**
 * Migration class used to import Default Groups from fixtures.
 */
class DefaultContentGroupImport extends MigrateCkanGroupImport {

  /**
   * __construct().
   */
  public function __construct($arguments) {
    if (!isset($arguments['endpoint'])) {
      $arguments['endpoint'] = drupal_get_path('module', 'dkan_fixtures_default') . '/data/';
      $arguments['list_url'] = 'group_list.json';
      $arguments['item_url'] = 'group_show?id=:id.json';
    }
    parent::__construct($arguments);
  }
}

/**
 * Migration class used to import Default Visualization Entities from fixtures.
 */
class DefaultContentVisualizationEntityImport extends Migration {

  /**
   * __construct().
   */
  public function __construct($arguments) {
    parent::__construct($arguments);

    $this->endpoint = drupal_get_path('module', 'dkan_fixtures_default') . '/data/';
    $list_url = $this->endpoint . 'visualization_entity_list.json';
    $item_url = $this->endpoint . 'visualization_entity_show?id=:id.json';

    $this->page = isset($arguments['page']) ? $arguments['page'] : '';
    $this->offset = isset($arguments['offset']) ? $arguments['offset'] : '';

    $fields = $this->getVisualizationEntityFields();

    // The source that will feed data to the migration.
    $this->source = new MigrateSourceList(
      new CKANListJSON( $list_url, array('page' => $this->page, 'offset' => $this->offset)),
      new CKANItemJSON($item_url, $fields), $fields);

    // This will receive data that originated from the source and has been mapped
    // by the Migration class, and create Drupal objects.
    $this->destination = new MigrateDestinationEntityAPI('visualization','ve_chart');

    // This will keep track of which source items have been imported and what destination objects they map to.
    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'id' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'id',
        ),
      ),
      MigrateDestinationEntityAPI::getKeySchema('visualization')
    );

    // Add Field mappings.
    $this->addFieldMapping('title', 'title');
    $this->addFieldMapping('field_description', 'description');
    $this->addFieldMapping('field_ve_settings', 'settings');
    $this->addFieldMapping('field_file', 'local_file');
    $this->addFieldMapping('uuid', 'uuid');
  }

  /**
   *
   */
  public function prepareRow($row) {
    // If a file was used then download the file locally and update the field settings.
    $settings = json_decode($row->settings);
    $source_url = $settings->source->url;
    if (!empty($source_url)) {
      $path_parts = explode('/', $source_url);
      if ($path_parts[0] === 'files') {
        // The file needs to be copied into the files directory.
        $source_url = urldecode($source_url);
        $source_url = preg_replace('!\s+!', ' ', $source_url);
        $source_url = DRUPAL_ROOT . '/' . $this->endpoint . $source_url;
        if (file_exists($source_url)) {
          // Copy file and save on public directory.
          $data = file_get_contents($source_url);
          $name = basename($source_url);
          $uri = 'public://' . $name;
          $file = file_save_data($data, $uri, FILE_EXISTS_REPLACE);

          if ($file) {
            // Add file data in row.
            $row->local_file = (array) $file;
            // Update file path on settings field.
            $settings->source->url = '/' . variable_get('file_public_path', conf_path() . '/files') . '/' . $name;
            $row->settings = json_encode($settings);
          }
        }
        else {
          $this->queuedMessages[] = array(
            'message' => t('%url was not available for download', array('%url' => $source_url)),
            'level' => MigrationBase::MESSAGE_NOTICE,
          );
        }
      }
    }
  }

  /**
   * Do extra processing on the node data before its saved.
   */
  public function prepare($entity, $row) {

    // Setup superuser as author.
    $entity->uid = 1;

    // Add resource reference if present.
    $resource_ref[] = array('target_type' => 'node', 'target_uuid' => $row->existing_resource_uuid);
    $entity->field_uuid_resource = array(LANGUAGE_NONE => $resource_ref);
  }

  /**
   * @return array
   */
  public function getVisualizationEntityFields() {
    return array(
      "id" => "Visualization ID",
      "type" => "Visualization Bundle",
      "title" => "Title",
      "description" => "Description",
      "settings" => "Visualization settings",
      "existing_resource_uuid" => "The ID of the existing resource",
    );
  }
}

/**
 * Migration class used to import Default Panelized Nodes from fixtures.
 */
class DefaultContentPanelizedNodesImport extends Migration {

  /**
   * __construct().
   */
  public function __construct($arguments) {

    $this->endpoint = isset($arguments['endpoint']) ? $arguments['endpoint'] : drupal_get_path('module', 'dkan_fixtures_default') . '/data/';
    $list_url = isset($arguments['list_url']) ? $arguments['list_url'] : $this->endpoint . 'panelized_node_list.json';
    $item_url = isset($arguments['item_url']) ? $arguments['item_url'] : $this->endpoint . 'panelized_node_item.json';

    parent::__construct($arguments);

    $this->page = isset($arguments['page']) ? $arguments['page'] : '';
    $this->offset = isset($arguments['offset']) ? $arguments['offset'] : '';

    $fields = $this->getPanelizedNodeFields();

    // The source that will feed data to the migration.
    $this->source = new MigrateSourceList(
      new CKANListJSON($list_url, array('page' => $this->page, 'offset' => $this->offset)),
      new CKANItemJSON($item_url, $fields), $fields);

    // This will receive data that originated from the source and has been mapped
    // by the Migration class, and create Drupal objects.
    $this->destination = new MigrateDestinationNode($arguments['content_type']);

    // This will keep track of which source items have been imported and what destination objects they map to.
    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'id' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'id',
        ),
      ),
      MigrateDestinationNode::getKeySchema()
    );

    // Add Field mappings.
    $this->addFieldMapping('title', 'title');
    $this->addFieldMapping('uuid', 'uuid');
  }

  /**
   * Do extra processing on the node data before its saved.
   */
  public function prepare($entity, $row) {
    // Setup superuser as author.
    $entity->uid = 1;
  }

  /**
   *
   */
  public function complete($entity, $row) {
    // Import panelizer data.
    $this->importPanelizerData($entity, $row->panelizer);
  }

  /**
   *
   */
  public function getPanelizedNodeFields() {
    return array(
      "id" => "Node ID",
      "uuid" => "UUID",
      "type" => "Content Type",
      "title" => "Title",
    );
  }

  /**
   *
   */
  public function importPanelizerData($entity, $panelizer_data) {

    // Convert panelizer data into array recursively. Almos all functions on Panels expect arrays.
    $panelizer_data = json_decode(json_encode($panelizer_data), true);

    $panelizer_entity = $panelizer_data['panelizer_entity'];
    $panels_display = $panelizer_data['panels_display'];
    $panels_pane = $panelizer_data['panels_pane'];

    // Import panels_display.
    drupal_write_record('panels_display', $panels_display);

    // Import panels_pane.
    foreach ($panels_pane as $pane) {

      $pane['did'] = $panels_display['did'];

      if ($pane['type'] === 'visualization_embed') {
        if (!empty($pane['configuration']['local_source'])) {
          // Get the visualization UUID.
          $viz_uuid = $pane['configuration']['local_source'];
          // The 'local_source' setting needs to be in the format "Title [id:XXX]".
          $visualization = reset(entity_uuid_load('visualization', array($viz_uuid)));
          $pane['configuration']['local_source'] = '';
          if ($visualization) {
            $pane['configuration']['local_source'] = $visualization->title . ' [id:' . $visualization->id . ']';
          }
        }
      }

      if ($pane['type'] === 'fieldable_panels_pane') {
        $fpp_data = $pane['fpp_data'];
        list($id_type, $id_value) = explode(':', $pane['subtype']);

        $fpp = new stdClass();
        $fpp->title = $fpp_data['title'];
        $fpp->bundle = $fpp_data['bundle'];
        $fpp->uuid = $id_value;
        $fpp->link = $fpp_data['link'];
        $fpp->path = $fpp_data['path'];
        $fpp->reusable = $fpp_data['reusable'];
        $fpp->admin_title = $fpp_data['admin_title'];
        $fpp->admin_description = $fpp_data['admin_description'];
        $fpp->category = $fpp_data['category'];

        $wrapper = entity_metadata_wrapper('fieldable_panels_pane', $fpp);

        $fields = field_info_instances('fieldable_panels_pane', $fpp_data['bundle']);
        foreach ($fields as $field_name => $field_spec) {
          if (isset($fpp_data[$field_name])) {
            $field_data = $fpp_data[$field_name];
            if ($field_data['bundle'] === 'image') {

              $file_url = urldecode($field_data['image_path']);
              $file_url = preg_replace('!\s+!', ' ', $file_url);
              $file_url = DRUPAL_ROOT . '/' . $this->endpoint . $file_url;
              if (file_exists($file_url)) {
                // Copy file and save on public directory.
                $data = file_get_contents($file_url);
                $name = basename($file_url);
                $uri = 'public://' . $name;
                $file = file_save_data($data, $uri, FILE_EXISTS_REPLACE);

                if ($file) {
                  // Add file data in row.
                  $field_data = (array) $file;
                }
              }
            }

            $wrapper->$field_name->set($field_data);
          }
        }

        fieldable_panels_panes_save($fpp);
      }

      drupal_write_record('panels_pane', $pane);
    }

    // Import panelizer_entity.
    $panelizer_entity['did'] = $panels_display['did'];
    $panelizer_entity['entity_id'] = $entity->nid;
    $panelizer_entity['revision_id'] = $entity->vid;
    drupal_write_record('panelizer_entity', $panelizer_entity);
  }
}

/**
 * Migration class used to import Default Data Dashboards from fixtures.
 */
class DefaultContentDataDashboardsImport extends DefaultContentPanelizedNodesImport {

  /**
   * __construct().
   */
  public function __construct($arguments) {
    $arguments['endpoint'] = drupal_get_path('module', 'dkan_fixtures_default') . '/data/';
    $arguments['list_url'] = $arguments['endpoint'] . 'data_dashboard_list.json';
    $arguments['item_url'] = $arguments['endpoint'] . 'data_dashboard_show?id=:id.json';
    $arguments['content_type'] = 'data_dashboard';

    parent::__construct($arguments);
  }
}

/**
 * Migration class used to import Default Data Stories from fixtures.
 */
class DefaultContentDataStoriesImport extends DefaultContentPanelizedNodesImport {

  /**
   * __construct().
   */
  public function __construct($arguments) {
    $arguments['endpoint'] = drupal_get_path('module', 'dkan_fixtures_default') . '/data/';
    $arguments['list_url'] = $arguments['endpoint'] . 'dkan_data_story_list.json';
    $arguments['item_url'] = $arguments['endpoint'] . 'dkan_data_story_show?id=:id.json';
    $arguments['content_type'] = 'dkan_data_story';

    parent::__construct($arguments);

    // Add field mappings.
    $this->addFieldMapping('field_image', 'field_image');
    $this->addFieldMapping('body', 'body_value');
    $this->addFieldMapping('body:summary', 'body_summary');
    $this->addFieldMapping('body:format', 'body_format');
  }

  /**
   *
   */
  public function prepareRow($row) {
    // Prepare 'field_image' field for field mapping.
    $row->field_image = DRUPAL_ROOT . '/' . $this->endpoint . $row->field_image;

    // Prepare 'body' field for field mapping.
    $body = $row->body->und[0];
    $row->body_value = $body->value;
    $row->body_summary = $body->summary;
    $row->body_format = $body->format;
  }

  /**
   * Do extra processing on the node data before its saved.
   */
  public function prepare($entity, $row) {

  }
}

/**
 * Deregisters migrations.
 */
function dkan_fixtures_default_migrations_disable() {
  Migration::deregisterMigration('dkan_fixtures_default_datasets');
  Migration::deregisterMigration('dkan_fixtures_default_resources');
  Migration::deregisterMigration('dkan_fixtures_default_groups');
  Migration::deregisterMigration('dkan_fixtures_default_visualization_entities');
  Migration::deregisterMigration('dkan_fixtures_default_data_stories');
  Migration::deregisterMigration('dkan_fixtures_default_data_dashboards');
}
